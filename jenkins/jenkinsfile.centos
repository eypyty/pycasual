#!groovy

//
// Script for the backend builder
//
def backend_builder = '''#! /bin/sh
CASUAL_VERSION="0.42"
CASUAL_RELEASE=${BUILD_NUMBER}

source scl_source enable devtoolset-4

umask 000
cd /git/casual
find . -name "*.gcda"| xargs rm
rm -rf middleware/.casual/unittest/.singleton/.domain-singleton
casual-make -d -a --use-valgrind make && \
   casual-make clean && \
   casual-make -d -a --use-valgrind compile && \
   casual-make -d -a --use-valgrind link && \
   ISOLATED_UNITTEST_DIRECTIVES="--gtest_output='xml:report.xml'" casual-make test && \
   casual-make make && \
   casual-make clean && \
   casual-make compile && \
   casual-make link && \
   casual-make install && \
   cd /opt/casual && \
   tar cvf /git/casual/casual-middleware.tar . && \
   cd /git/casual && python thirdparty/setup/install_nginx.py && \
   cd /opt/casual && \
   unzip /git/casual/casual-webapp.zip && \
   cd .. && \
   tar cvf casual-middleware.tar casual && \
   cp casual-middleware.tar /git/casual/. && \
   cp /git/casual/package/casual-middleware.spec /root/rpmbuild/SPECS/. && \
   rpmbuild -bb  --define "casual_version $CASUAL_VERSION" --define "casual_release $CASUAL_RELEASE" /root/rpmbuild/SPECS/casual-middleware.spec  &&
   cp /root/rpmbuild/RPMS/x86_64/casual-middleware*.rpm /git/casual/.
'''

//
// Script for the frontend builder
//
def frontend_builder = '''#! /bin/sh
umask 000
cd /git/casual/webapp
bower update --allow-root
touch bower_components/app-route/app-location.html
polymer build
cd ..
zip -r casual-webapp.zip webapp
chmod a+w -R .
'''

//
// Startscript for dockercontainer
//
def dockerstart = '''#! /bin/bash

casual-domain-manager -c configuration/domain.yaml
'''

def build( name, image, content)
{
   def current_dir = pwd()
   writeFile file: 'builder.sh', text: content

   sh """
   chmod +x builder.sh
   docker run -v $current_dir:/git/casual $image
   """
}

node {

   slackSend color: "good", message: "Build started: ${env.JOB_NAME} - ${env.BUILD_NUMBER} (<${env.JOB_URL}|Open>)"

   try
   {
      stage('Checkout')
      {
         checkout scm
      }  

      stage('Build frontend')
      {
          docker.image('frontendtrial').inside
          {
             sh """
                umask 000
                cd webapp
                bower update
                touch bower_components/app-route/app-location.html
                polymer build
                cd ..
                zip -r casual-webapp.zip webapp
                chmod a+w -R .
             """ 
          }
          archive includes: '**/casual-webapp.zip'
      }

      stage('Build backend - Unittest/CodeCoverage')
      {
          build( 'centoscompile', 'casual/centos', backend_builder)

          step([$class: 'XUnitBuilder',
             thresholds: [[$class: 'FailedThreshold', failureThreshold: '1']],
             tools: [[$class: 'GoogleTestType', pattern: '**/report.xml']]])

          archive includes: '**/casual-middleware*.rpm'
      }

      if ( "${env.BRANCH_NAME}" == "develop" )
      {
         stage('Create container')
         {
            // 
            // Setup files
            //
            writeFile file: 'Dockerfile', text: dockerfile
            writeFile file: 'start.sh', text: dockerstart

            sh """
            docker build -t casual/middleware-centos -f Dockerfile .
            """
         }

//         stage('Publishing to dockerhub')
//         {
//            sh """
//            docker tag -f casual-test-ubuntu casual/middleware:latest
//            docker push casual/middleware
//            """
//         }
//
         stage('Deploy')
         {
            sh """
            cd /var/lib/jenkins/git/casual/docker
            ./restart.sh
            """
         }
         currentBuild.result = 'SUCCESS'
      }
     slackSend color: "good", message: "Build finished: ${env.JOB_NAME} - ${env.BUILD_NUMBER} (<${env.JOB_URL}|Open>)"
   }
   catch (Exception e)
   {
      currentBuild.result = 'FAILURE'
      slackSend color: "danger", message: "Build failed: ${env.JOB_NAME} - ${env.BUILD_NUMBER} (<${env.JOB_URL}|Open>)"
   }

}
